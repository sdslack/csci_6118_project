# TO NOTE: User edit to define query (or queries) between here and dashed line:
# Set up days from infection filter
num_list = "=0" + "".join(f",={i}" for i in range(1, 91))

# Define QUERIES dictionary, adding new entry to each desired query
QUERIES = {
    'query_1': f"Days from Infection:{num_list}; Risk Factor:=IV Drug User",
    'query_2': f"Days from Infection:{num_list}; Risk Factor:=Male Sex with Male, =Sex worker, =Heterosexual"
}

# -----------------------------------------------------------------------------------------

# Extracting file names from QUERIES
col_names = []
for key, val in QUERIES.items():
    for col in val.split(';'):
        col_name = col.split(':')[0].strip()
        col_names.append(col_name)

rule all:
    input:
        expand("../docs_snakemake/{query}_{col_name}_hist.png",
               query=list(QUERIES.keys()), col_name=col_names),
        expand("../docs_snakemake/{query}_consort_plot.png", query=list(QUERIES.keys()))

rule make_hist_plots:
    input:
        '../docs_snakemake/{query}_{col_name}_counts.csv'
    output:
        '../docs_snakemake/{query}_{col_name}_hist.png'
    shell:
        "python ../src/sds/plot_hist.py " \
        + "--file-name '{input}' " \
        + "--plot-output '{output}' "

rule make_csv_counts:
    input:
        filt_data = "../docs_snakemake/{query}_filtered_data.csv"
    output:
        counts = "../docs_snakemake/{query}_{col_name}_counts.csv"
    params:
        col_name = lambda wildcards: wildcards.col_name
    shell:
        "python ../src/lkr/days_from_infection_plot.py " \
        + "--csv_file '{input.filt_data}' " \
        + "--column_name '{params.col_name}' " \
        + "--output_file '{output.counts}' "

rule make_consort:
    input:
        all_data = "../docs_snakemake/{query}_all_data.csv",
        req_summ = "../docs_snakemake/{query}_request_summary.csv"

    output:
        cons_plot = "../docs_snakemake/{query}_consort_plot.png",
        cons_input = "../docs_snakemake/{query}_filtered_consort_input.csv"
    shell:
        "python3 ../src/gg/create_consort.py " \
        + "--consort_input_file_path '{input.all_data}' " \
        + "--query_summary_file '{input.req_summ}' " \
        + "--out_consort_png '{output.cons_plot}' " \
        + "--bool_out_csv '{output.cons_input}'"

rule run_query:
    output:
        filt_data = "../docs_snakemake/{query}_filtered_data.csv",
        all_data = "../docs_snakemake/{query}_all_data.csv",
        req_summ = "../docs_snakemake/{query}_request_summary.csv"
    params:
        value = lambda wcs: QUERIES[wcs.query]
    shell:
        "python ../src/jb/get_queried_data.py " \
        + "--filters '{params.value}' " \
        + "--query_output_file {output.filt_data} " \
        + "--query_cols_all_data_file '{output.all_data}' " \
        + "--output_columns 'SE id(SA), Days from Infection, Risk Factor' " \
        + "--query_request_file {output.req_summ} " \
        + "--global_logical_operator '&&'"
