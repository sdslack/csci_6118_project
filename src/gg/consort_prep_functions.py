import sys
import pandas as pd
import numpy as np
import re
import rpy2.robjects as robjects
from rpy2.robjects import pandas2ri
import os
sys.path.append('src/jb')  # noqa
import query_utils as query


def try_convert_to_fl(value):
    """This function will check if a value can be
    converted to a float without raising an error.
    Outputs a float if it is possible.

    Parameters
    ----------
    value: Any datatype

    Returns
    -------
    float_val: A float
    """
    try:
        float_val = float(value)
        return float_val
    except (ValueError, TypeError):
        return None


# Create a function to subset our data to the relevant columns being queried
def subset_dataframe_by_names(data, column_names):
    """Output is a subsetted dataframe, containing only the queried columns.

    Parameters
    ----------
    data: A pandas dataframe of the database data
    column_names: The names of the columns that are being queried

    Returns
    -------
    data_subset
        A pandas dataframe of database data
        Subset to include only the columns relevant to a given query
    """
    try:
        if not isinstance(data, pd.DataFrame):
            raise ValueError(data + " should be a pandas dataframe")
            sys.exit(1)
    except NameError:
        print(data + " cannot be found.")
        sys.error(1)
    if len(data) < 1:
        raise ValueError(data + " is empty.")
        sys.exit(1)
    if not isinstance(column_names, list):
        raise ValueError(column_names, "is not a list")
        sys.exit(1)
    column_names_of_interest_list = column_names
    col_name_list = data.columns.tolist()
    data_subset = pd.DataFrame()
    for col in column_names_of_interest_list:
        if col in col_name_list:
            data_subset[col] = data[col]
    # Handle the case where no matching columns are found
    if len(data_subset.columns) < 1:
        raise ValueError("No matching columns found in the DataFrame.")
        sys.exit(1)
    return data_subset

def consort_filter_data(data, filters, output_cols, csv = None):
    """Filter the data based on the provided filters
    and create input for the consort plot

    Parameters
    ----------
    data : .csv file
        Name of the file to be searched.
    filters: dict
        Dictionary of filters.
        Each label is the name of the column.
        Each value are the filter criteria.
    output_cols: list
        List of columns to output to final df.
    logical operator:
        How to combine filters from multiple columns
    csv:
        Optional.
        If would like a copy of the consort_input_df as a csv,
        Include file path where it should be saved

    Returns
    -------
    consort_input_df:
        Input pandas dataframe for the create_consort_plot function
        With information about how each column has been filtered
    """
    if not isinstance(data, pd.DataFrame):
        raise ValueError("Data must be in a pandas dataframe")
        sys.exit(1)
    else:
        consort_input_df_pre = data

    # check if column is in data
    existing_cols = query.check_column_exists(filters.keys(), consort_input_df_pre)

    # Subset consort_input_df to only the relevant columns
    request_query_col = list(filters.keys())
    consort_input_df = subset_dataframe_by_names(consort_input_df_pre,
                                                 request_query_col)

    column_masks, not_equals_masks = query.create_by_filter_boolean_filter_summary(filters, consort_input_df, existing_cols)

    for key in existing_cols:
        key_mask_combined = query.create_by_column_boolean_filter_summary(column_masks, not_equals_masks, key)
        column_name = f'Filtered_Column_{key}'
        consort_input_df[column_name] = key_mask_combined
    
    # Give option to write consort_input_df into a csv file
    if csv is not None:
        consort_df_file_path = csv
        consort_input_df.to_csv(consort_df_file_path, index=False)
    
    # Output pandas dataframe for use in R
    return(consort_input_df)

def query_file_to_summary(query_summary_file):
    """This function will prepare a user query request file
    For the creation of a consort diagram.

    Parameters
    ----------
    query_summary_file:
        .csv file generated by query_utils.py

    Returns
    -------
    query_df_formatted: A pandas dataset
        Formatted for use in format_consort_input_file
    """
    try:
        query_summary_file = pd.read_csv(query_summary_file)
    except (FileNotFoundError, NameError):
        print("Cannot find " + query_summary_file)
        sys.exit(1)
    if len(query_summary_file) > 1:
        new_rows = []
        for _, row in query_summary_file.iterrows():
            values = row['Filter Value'].split(',')
            for value in values:
                new_row = row.copy()
                new_row['Filter Value'] = value
                new_rows.append(new_row)
        # Creating a new DataFrame from the list of rows
        query_df_formatted = pd.DataFrame(new_rows)
    else:
        query_df_formatted = pd.DataFrame(query_summary_file)
    return query_df_formatted

# Format query summary
def make_query_df_formatted(filters = None, query_summary_file = None,
                            consort_input_file = None):
    if filters != None and query_summary_file != None:
        raise ValueError("Cannot specify query_summary file and filters")
        sys.exit(1)
    elif filters != None:
        if consort_input_file is None:
            raise ValueError("Must specify consort_input_file")
            sys.exit(1)
        else:
            column_names = consort_input_file.columns.tolist()
            filter_args = query.split_arguments(filters)
            filters_provided = query.get_filters(filter_args)
            query_df_formatted_long = query.make_query_request_summary(
                filters_provided, column_names)
    elif query_summary_file != None:
        query_summary_file = str(query_summary_file)
        filters_provided = query_file_to_summary(query_summary_file)
        query_df_formatted_long = query_summary_file
    else:
        raise ValueError("Must specify either query_summary_file or filters")
        sys.exit(1)
    query_df_formatted = query_df_formatted_long[
            query_df_formatted_long['Search by this column?'] == 'Yes']
    return query_df_formatted, filters_provided

# Create a query function which will change values on the query tracking table
def run_consort_plot_rcode(consort_input_df,
                           query_df_formatted,
                           out_consort_png,
                          logical_operator):
    """Output is a png file of a consort diagram

    Parameters
    ----------
    consort_input_df: A pandas dataframe containing database data
    query_df_formatted: A pandas dataframe summarizing query requests
    out_consort_png: A file path ending in .png where consort will be saved

    Returns
    -------
    out_consort_png is saved at the file path
    It contains a consort diagram with filters specified in query_df_formatted
    """
    try:
        if not isinstance(consort_input_df, pd.DataFrame):
            raise ValueError(consort_input_df + " should be a pandas dataframe")
            sys.exit(1)
    except NameError:
        print(consort_input_df + " cannot be found.")
        sys.error(1)
    
    try:
        if not isinstance(query_df_formatted, pd.DataFrame):
            raise ValueError(query_df_formatted + " should be a pandas dataframe")
            sys.exit(1)
    except NameError:
        print(query_df_formatted + " cannot be found.")
        sys.error(1)

    out_consort_png = str(out_consort_png)
    if not out_consort_png.endswith(".png"):
        raise ValueError("File path must end in .png")
        sys.exit(1)
    
    if logical_operator != "&&" and logical_operator != "||":
        raise ValueError("logical_operator must be equal to && or ||")
        sys.exit(1)

    pandas2ri.activate()

    r_consort_input_file = pandas2ri.py2rpy(consort_input_df)
    r_query_summary_file = pandas2ri.py2rpy(query_df_formatted)

    # Read the content of the R script
    with open('src/gg/consort_plot.r', 'r') as file:
        r_code = file.read()
    # Execute r code
    robjects.r(r_code)
    # Call the function
    robjects.r['consort_plot_function'](r_consort_input_file,
                                        r_query_summary_file,
                                        out_consort_png,
                                       logical_operator)
    pandas2ri.deactivate()
